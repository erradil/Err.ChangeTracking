using Microsoft.CodeAnalysis;
using System.Collections.Generic;
using System.Text;

namespace Err.ChangeTracking.SourceGenerator;

internal class TemplateCodeHelper
{
    public static string GenerateTrackableClass(TrackableClassMetadata classMetadata)
    {
        var modifiers = BuildModifiers(classMetadata);
        var typeKeyword = classMetadata.IsRecord ? "record" : "class";
        var typeParams = classMetadata.TypeParameters.Count > 0 ? $"<{string.Join(", ", classMetadata.TypeParameters)}>" : string.Empty;


        StringBuilder propertiesTemplateCode = new();
        StringBuilder collectionPropertiesTemplateCode = new();

        // Generate properties
        foreach (var prop in classMetadata.Properties)
        {
            if (prop.IsCollection)
            {
                string propTempateCode =$@"
    private {prop.WrapperCollectionType} {prop.FieldName};
    public partial {prop.TypeName} {prop.Name}
    {{
        get => {prop.FieldName};
        set => {prop.FieldName} = new {prop.WrapperCollectionType}(value);
    }}";

                collectionPropertiesTemplateCode.AppendLine(propTempateCode);
            }
            else
            {
                string propTempateCode =$@"
    private {prop.TypeName} {prop.FieldName};
    {modifiers} partial {prop.TypeName} {prop.Name}
    {{
        get => {prop.FieldName};
        set {{ _changeTracker?.RecordChange(nameof({prop.Name}), {prop.FieldName}, value); {prop.FieldName} = value; }}
    }}";

                propertiesTemplateCode.AppendLine(propTempateCode);
            }
        }

        string classTemplateCode =
$@"
// <auto-generated/>
using System;
using System.Collections.Generic;

namespace {classMetadata.Namespace};

{modifiers} partial {typeKeyword} {classMetadata.ClassName}{typeParams} : ITrackable<{classMetadata.ClassName}>
{{
    private IChangeTracking<{classMetadata.ClassName}> _changeTracker;
    public IChangeTracking<{classMetadata.ClassName}> GetChangeTracker() => _changeTracker ??= new ChangeTracking<{classMetadata.ClassName}>(this);
{propertiesTemplateCode}
{collectionPropertiesTemplateCode}
}}";
        return classTemplateCode;
    }



    private static string BuildModifiers(TrackableClassMetadata metadata)
    {
        var modifiers = new List<string>();

        switch (metadata.Accessibility)
        {
            case Accessibility.Public:
                modifiers.Add("public");
                break;
            case Accessibility.Internal:
                modifiers.Add("internal");
                break;
            case Accessibility.Protected:
                modifiers.Add("protected");
                break;
            case Accessibility.Private:
                modifiers.Add("private");
                break;
        }

        if (metadata.IsSealed)
            modifiers.Add("sealed");
        if (metadata.IsAbstract)
            modifiers.Add("abstract");

        return string.Join(" ", modifiers);
    }

    private static string BuildPropertyModifiers(TrackablePropertyMetadata property)
    {
        var modifiers = new List<string>();

        switch (property.Accessibility)
        {
            case Accessibility.Public:
                modifiers.Add("public");
                break;
            case Accessibility.Internal:
                modifiers.Add("internal");
                break;
            case Accessibility.Protected:
                modifiers.Add("protected");
                break;
            case Accessibility.Private:
                modifiers.Add("private");
                break;
        }

        if (property.IsStatic)
            modifiers.Add("static");
        if (property.IsAbstract)
            modifiers.Add("abstract");
        if (property.IsVirtual)
            modifiers.Add("virtual");
        if (property.IsOverride)
            modifiers.Add("override");

        return string.Join(" ", modifiers);
    }

}

